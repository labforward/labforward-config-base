extends:
  - 'eslint:recommended'
  - 'plugin:prettier/recommended'
  - 'prettier'
parser: '@babel/eslint-parser'
rules:
  # https://eslint.org/docs/rules/
  # Possible Errors
  getter-return:
    - error
    - allowImplicit: true
  no-await-in-loop: error
  no-cond-assign: ['error', 'always']
  no-console: warn
  no-template-curly-in-string: error
  require-atomic-updates: off
  # Best Practices
  array-callback-return:
    - error
    - allowImplicit: true
  block-scoped-var: error
  complexity: ['warn', 10]
  consistent-return: error
  default-case: error
  default-param-last: error
  dot-notation: error
  eqeqeq: ['error', 'smart']
  no-alert: error
  no-caller: error
  no-constructor-return: error
  no-empty-function:
    - error
    - allow: ['arrowFunctions', 'functions', 'methods']
  no-eval: error
  no-extend-native: error
  no-extra-bind: error
  no-extra-label: error
  no-global-assign: error
  no-implicit-globals: error
  no-iterator: error
  no-labels:
    - error
    - allowLoop: false
      allowSwitch: false
  no-lone-blocks: error
  no-loop-func: error
  no-new: error
  no-new-func: error
  no-new-wrappers: error
  no-octal-escape: error
  no-param-reassign:
    - error
    - props: true
      ignorePropertyModificationsFor:
        - 'acc' # for reduce accumulators
        - 'accumulator' # for reduce accumulators
        - 'e' # for e.returnvalue
        - 'ctx' # for Koa routing
        - 'req' # for Express requests
        - 'request' # for Express requests
        - 'res' # for Express responses
        - 'response' # for Express responses
        - '$scope' # for Angular 1 scopes
        - 'staticContext' # for ReactRouter context
  no-proto: error
  no-return-assign: ['error', 'always']
  no-return-await: error
  no-script-url: error
  no-self-assign: error
  no-self-compare: error
  no-sequences: error
  no-throw-literal: error
  no-unused-expressions: error
  no-useless-concat: error
  no-useless-return: error
  no-void: error
  radix: error
  vars-on-top: error
  yoda: error
  # Strict
  strict: ['error', 'never']
  # Variables
  no-label-var: error
  no-restricted-globals: ['error', 'event']
  no-shadow: error
  no-undef-init: error
  no-unused-vars:
    - error
    - args: after-used
      argsIgnorePattern: ^_
      ignoreRestSiblings: true
      varsIgnorePattern: ^_
  no-use-before-define:
    - error
    - functions: false
  # Stylistic Issues
  camelcase:
    - warn
    - properties: always
  func-names: warn
  func-style:
    - error
    - declaration
    - allowArrowFunctions: true
  max-depth: ['warn', 4]
  max-nested-callbacks: ['warn', 3]
  max-params: ['warn', 4]
  max-statements: ['warn', 10]
  new-cap: error
  no-array-constructor: error
  no-bitwise: error
  no-continue: error
  no-lonely-if: error
  no-multi-assign: error
  no-nested-ternary: error
  no-new-object: error
  no-plusplus: error
  no-unneeded-ternary: error
  operator-assignment: ['error', 'always']
  padding-line-between-statements:
    [
      2,
      { 'blankLine': 'always', 'prev': ['const', 'let', 'var'], 'next': '*' },
      {
        'blankLine': 'any',
        'prev': ['const', 'let', 'var'],
        'next': ['const', 'let', 'var'],
      },
    ]
  prefer-object-spread: error
  spaced-comment:
    - warn
    - always
    - exceptions:
        - '-'
        - +
        - '='
        - '/'
        - '*'
      markers:
        - '='
        - '!'
        - '/'
  # ECMAScript 6
  no-useless-computed-key: error
  no-useless-constructor: error
  no-useless-rename: error
  no-var: error
  object-shorthand: error
  prefer-const:
    - error
    - destructuring: all
  prefer-destructuring:
    - error
    - array: false
      object: true
  prefer-numeric-literals: error
  prefer-rest-params: error
  prefer-spread: error
  prefer-template: error
  symbol-description: error

overrides:
  - files:
      - '**/*.ts'
      - '**/*.tsx'
    parser: '@typescript-eslint/parser' # https://github.com/babel/babel-eslint/issues/663
    plugins:
      - '@typescript-eslint'
    extends:
      - 'plugin:@typescript-eslint/eslint-recommended'
      - 'plugin:@typescript-eslint/recommended'
    rules:
      no-unused-vars: off
      '@typescript-eslint/no-unused-vars':
        - error
        - args: after-used
          argsIgnorePattern: ^_
          ignoreRestSiblings: true
          varsIgnorePattern: ^_

      no-use-before-define: off
      '@typescript-eslint/no-use-before-define':
        - error
        - functions: false
